package com.college.service;

import com.college.Main;
import com.college.domain.Housekeeper;
import com.college.domain.Reservation;
import com.college.domain.Room;
import com.college.factory.HousekeeperFactory;
import com.college.factory.ReservationFactory;
import com.college.factory.RoomFactory;
import com.college.repository.HousekeeperRepository;
import com.college.repository.RoomRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = Main.class)
//@SpringBootTest
class RoomServiceTest {
    @Autowired
    RoomRepository repository;

    @Autowired
    RoomService service;

    @Autowired
    ReservationService reservationService;

    @Autowired
    HousekeeperService housekeeperService;

    Room roomOne;
    Room roomTwo;
    Reservation reservationOne;
    Housekeeper housekeeperOne;

    @BeforeEach
    void setUp() {
        roomOne = RoomFactory.createRoom(1, "medium", 1200.50f, true, "Sea view, King bed, WiFi");
        roomTwo = RoomFactory.createRoom(2, "suite", 100.50f, true, "King123 bed, sink");

        //so step 1 after adding code in entity u need.
        // use the service where that code was added.in this case the @oneone is in room. so we are in roomservice test
        //then create a reservation and add it to db first so that

        // create a reservation
        reservationOne = new Reservation();
        reservationOne.setReservationDateTimeStart("2025-09-01T12:00");
        reservationOne.setReservationDateTimeEnd("2025-09-05T12:00");

        Housekeeper housekeeperOne = HousekeeperFactory.createHousekeeper(
                0, // ID will be generated by DB if you use @GeneratedValue
                "John",
                "Doe"
        );

    }

    @Test
    void testSaveRoomWithReservationAndHousekeeper() {
        // 1. Save reservation first
        Reservation savedReservation = reservationService.create(reservationOne);

        // 2. Create and save housekeeper
        Housekeeper housekeeperOne = HousekeeperFactory.createHousekeeper(
                0, // ID will be generated by DB
                "John",
                "Doe"
        );

        Housekeeper savedHousekeeper = housekeeperService.create(housekeeperOne);

        // 3. Assign reservation and housekeeper to room
        roomOne.setReservation(savedReservation);
        roomOne.setHousekeeper(savedHousekeeper);

        // 4. Save room
        Room savedRoom = service.create(roomOne);

        // 5. Assertions
        assertNotNull(savedRoom);
        assertNotNull(savedRoom.getReservation());
        assertNotNull(savedRoom.getHousekeeper());
        assertEquals(savedReservation.getReservationId(), savedRoom.getReservation().getReservationId());
        assertEquals(savedHousekeeper.getHousekeeperId(), savedRoom.getHousekeeper().getHousekeeperId());

        System.out.println(savedRoom + " saved with reservation " + savedReservation.getReservationId() +
                " and housekeeper " + savedHousekeeper.getHousekeeperId());
    }


    @Test
    void testSaveRoomWithReservation() {
        // Save reservation first
        Reservation savedReservation = reservationService.create(reservationOne);

        // Assign reservation to roomOnes object
        roomOne.setReservation(savedReservation);

        // Save room
        Room savedRoom = service.create(roomOne);

        assertNotNull(savedRoom);
        assertNotNull(savedRoom.getReservation());
        assertEquals(savedReservation.getReservationId(), savedRoom.getReservation().getReservationId());

        System.out.println(savedRoom + " saved with reservation " + savedReservation.getReservationId());
    }



    @Test
    void testSaveRoom() {
        assertNotNull(service.create(roomOne));
        System.out.println(roomOne + " saved ");
    }

    @Test
    void testReadRoom() {
        Room r = service.read(2);
        System.out.println(r + " retrieved ");
    }

    @Test
    void testUpdateRoom() {
        service.update(roomTwo);
        System.out.println(" updated: " + roomTwo);
    }

    @Test
    void testDeleteRoom() {
        service.delete(1);
        System.out.println(" room deleted");
    }
}
